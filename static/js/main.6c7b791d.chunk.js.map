{"version":3,"sources":["styles/global.ts","services/api.ts","Pages/Dashboard/styles.ts","Pages/Dashboard/index.tsx","assets/logo.svg","Pages/Repository/styles.ts","Pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Container","div","Repositories","Error","span","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storageRepository","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","onSubmit","value","onChange","e","target","placeholder","type","map","to","full_name","src","owner","avatar_url","alt","login","description","id","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","logoImg","stargazers_count","forks_count","open_issues_count","issue","href","html_url","user","title","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c7b791d.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    outline: 0;\r\n    box-size: border-box;\r\n  }\r\n\r\n  body {\r\n    background-color: #f4f4f4;\r\n    -webkit-font-smoothing: antialiased;\r\n    cursor: default;\r\n  }\r\n\r\n  body {\r\n    font: 2em Roboto, sans-serif;\r\n  }\r\n\r\n  #root {\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    padding: 40px 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n\r\n  ::placeholder {\r\n    font-size: 1.4em;\r\n    font-weight: bold;\r\n    color: #858585;\r\n  }\r\n\r\n`;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api.github.com/',\r\n});\r\n\r\nexport default api;\r\n","import styled, { css } from 'styled-components';\r\nimport { shade } from 'polished';\r\n\r\ninterface FormProps {\r\n  hasError: boolean;\r\n}\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 2em;\r\n  background: linear-gradient(to right, #000000, #555555);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  max-width: 1000px;\r\n  margin-top: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Form = styled.form<FormProps>`\r\n  font-size: 1em;\r\n  max-width: 1000px;\r\n  margin-top: 25px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  input {\r\n    flex: 1;\r\n    max-width: 350px;\r\n    height: 50px;\r\n    padding: 0 24px;\r\n    background-color: #f4f4f4;\r\n    font-size: 0.6em;\r\n\r\n    border: 0;\r\n    border-bottom: 3px solid rgb(3, 3, 3);\r\n    ${props => props.hasError && css`\r\n      border-bottom: 3px solid red;\r\n    `}\r\n  }\r\n\r\n  button {\r\n    border: 0;\r\n    padding: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    background-color: #14b43c;\r\n    border-radius: 5px;\r\n    margin-left: 10px;\r\n    box-shadow: 0px 0px 10px rgb(20, 180, 60, 0.5);\r\n    transition: all 0.2s;\r\n\r\n    &:hover {\r\n      background: ${shade(0.2, '#14b43c')};\r\n      box-shadow: 0px 0px 10px rgb(20, 180, 60, 1);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: row;\r\n  margin-top: 45px;\r\n\r\n  &::after {\r\n    content: '.';\r\n    width: 750px;\r\n    heigth: 2px;\r\n    font-size: 1px;\r\n    background-color: rgb(178, 178, 178);\r\n    display: flex;\r\n    margin-top: 165px;\r\n    position: absolute;\r\n  }\r\n\r\n  #arrow {\r\n    margin-top: 50px;\r\n\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Repositories = styled.div`\r\n  margin-top: 20px;\r\n  margin-bottom: 40px;\r\n  max-width: 1000px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n\r\n  a {\r\n    background-color: #f4f4f4;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 2px;\r\n    display: block;\r\n    text-decoration: none;\r\n    justify-content: center;\r\n    color: #222;\r\n\r\n    display: flex;\r\n    align-itens: center;\r\n\r\n    transition: all 0.2s;\r\n\r\n    &:hover {\r\n      transform: translate(10px);\r\n    }\r\n\r\n    & + a {\r\n      margin-top: 10px;\r\n    }\r\n\r\n    img {\r\n      width: 140px;\r\n      heigth: 140px;\r\n      border-radius: 100%;\r\n      box-shadow: 0px 0px 10px rgb(0, 0, 0, 0.5);\r\n    }\r\n\r\n    div {\r\n      margin: 25px 25px;\r\n\r\n      strong {\r\n        font-size: 1em;\r\n      }\r\n\r\n      p {\r\n        max-width: 500px;\r\n        font-size: 0.6em;\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Error = styled.span`\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  margin-top: 20px;\r\n  margin-left: -50px;\r\n\r\n  font-weight: bold;\r\n  font-size: 0.5em;\r\n  color: red;\r\n\r\n  text-transform: uppercase;\r\n`;\r\n","import React, { useState, useEffect, FormEvent } from 'react';\r\nimport { FiChevronRight } from 'react-icons/fi';\r\nimport { Link } from 'react-router-dom';\r\nimport api from '../../services/api';\r\n\r\nimport { Title, Repositories, Form, Container, Error } from './styles'\r\n\r\ninterface Repository {\r\n  full_name: string;\r\n  description: string;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  }\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [newRepo, setNewRepo] = useState('');\r\n  const [inputError, setInputError] = useState('');\r\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\r\n    const storageRepository = localStorage.getItem('@GithubExplorer:repositories');\r\n\r\n      if(storageRepository) {\r\n        return JSON.parse(storageRepository);\r\n      }\r\n\r\n    return [];\r\n\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      '@GithubExplorer:repositories',\r\n      JSON.stringify(repositories)\r\n    )\r\n  }, [repositories]);\r\n\r\n  async function handleAddRepository(event: FormEvent<HTMLFormElement>,): Promise<void> {\r\n    event.preventDefault();\r\n\r\n    if(!newRepo) {\r\n      setInputError('Digite um repositório');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await api.get<Repository>(`repos/${newRepo}`);\r\n      const repository = response.data;\r\n\r\n      setRepositories([...repositories, repository]);\r\n      setNewRepo('');\r\n      setInputError('');\r\n\r\n    } catch(err) {\r\n      setInputError('Repositório não encontrado ou não inexistente.');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Title>Explore repositórios no GitHub</Title>\r\n\r\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\r\n          <input value={newRepo} onChange={e => setNewRepo(e.target.value)} placeholder=\"Repositório\" />\r\n          <button type=\"submit\">Pesquisar</button>\r\n      </Form>\r\n\r\n      {inputError && <Error>{inputError}</Error>}\r\n\r\n      <Repositories>\r\n          {repositories.map(repository => (\r\n            <Container>\r\n              <Link key={repository.full_name} to={`/repository/${repository.full_name}`}>\r\n                <img src={repository.owner.avatar_url} alt={repository.owner.login} />\r\n                <div>\r\n                    <strong>{repository.full_name}</strong>\r\n                    <p>{repository.description}</p>\r\n                </div>\r\n                <FiChevronRight id=\"arrow\" size={50} />\r\n              </Link>\r\n            </Container>\r\n          ))}\r\n      </Repositories>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","export default __webpack_public_path__ + \"static/media/logo.6354bf3f.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    a {\r\n        display: flex;\r\n        align-items: center;\r\n        text-decoration: none;\r\n        text-transform: uppercase;\r\n        color: #a8a8a3;\r\n        transition: color 0.2s;\r\n        font-size: 2vh;\r\n\r\n        &:hover {\r\n            color: #666;\r\n        }\r\n\r\n        svg {\r\n            margin-right: 0.4vw;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const RepositoryInfo = styled.section`\r\n    margin-top: 10vh;\r\n\r\n    header {\r\n        display: flex;\r\n        align-items; center;\r\n\r\n        img {\r\n            width: 120px;\r\n            height: 120px;\r\n            border-radius: 50%;\r\n        }\r\n\r\n        div {\r\n            margin-left: 24px;\r\n\r\n            strong {\r\n                font-size: 36px;\r\n                color: #3d3d4d;\r\n            }\r\n\r\n            p {\r\n                font-size: 36px;\r\n                color: #737380;\r\n                margin-top: 4px;\r\n            }\r\n        }\r\n    }\r\n\r\n    ul {\r\n        display: flex;\r\n        list-style: none;\r\n        margin-top: 40px;\r\n\r\n        li {\r\n            & + li {\r\n                margin-left: 80px;\r\n            }\r\n\r\n            strong {\r\n                display: block;\r\n                font-size: 36px;\r\n                color: #3d3d4d;\r\n            }\r\n\r\n            span {\r\n                display: block;\r\n                margin-top: 4px;\r\n                font-size: 20px;\r\n                color: #6c6c80;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Issues = styled.div`\r\n    margin-top: 40px;\r\n\r\n    a {\r\n        background-color: #f4f4f4;\r\n        border-radius: 5px;\r\n        width: 100%;\r\n        padding: 2px;\r\n        display: flex;\r\n        align-items: center;\r\n        text-decoration: none;\r\n        justify-content: center;\r\n        color: #222;\r\n\r\n        display: flex;\r\n        align-itens: center;\r\n\r\n        transition: all 0.2s;\r\n\r\n        &:hover {\r\n            transform: translate(10px);\r\n        }\r\n\r\n        & + a {\r\n            margin-top: 10px;\r\n        }\r\n\r\n        img {\r\n            width: 140px;\r\n            heigth: 140px;\r\n            border-radius: 100%;\r\n            box-shadow: 0px 0px 10px rgb(0, 0, 0, 0.5);\r\n        }\r\n\r\n        div {\r\n            margin: 25px 25px;\r\n            flex: 1;\r\n\r\n            strong {\r\n                font-size: 1em;\r\n                color: #3d3d4d;\r\n            }\r\n\r\n            p {\r\n                max-width: 500px;\r\n                font-size: 0.6em;\r\n                margin-top: 4px;\r\n                color: #737380;\r\n            }\r\n        }\r\n\r\n        svg {\r\n            margin-left: auto;\r\n            color: #cbcbd6;\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { useRouteMatch, Link } from 'react-router-dom';\r\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\r\nimport api from '../../services/api';\r\n\r\nimport logoImg from '../../assets/logo.svg';\r\n\r\nimport { Header, RepositoryInfo, Issues } from './styles' ;\r\n\r\ninterface RepositoryParams {\r\n  repository: string;\r\n}\r\n\r\ninterface Repositorio {\r\n  full_name: string;\r\n  description: string;\r\n  stargazers_count: number;\r\n  forks_count: number;\r\n  open_issues_count: number;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\ninterface Issue {\r\n  id: number;\r\n  title: string;\r\n  html_url: string;\r\n  user: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\nconst Repository: React.FC = () => {\r\n  const [repository, setRepository] = useState<Repositorio | null>(null);\r\n  const [issues, setIssues] = useState<Issue[]>([]);\r\n\r\n  const { params } = useRouteMatch<RepositoryParams>();\r\n\r\n    useEffect(() => {\r\n      api.get(`repos/${params.repository}`).then((response => {\r\n        setRepository(response.data);\r\n      }))\r\n\r\n      api.get(`repos/${params.repository}/issues`).then((response => {\r\n        setIssues(response.data);\r\n      }))\r\n    }, [params.repository]);\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <img src={logoImg} alt=\"GitHub Explorer\" />\r\n        <Link to=\"/\">\r\n          <FiChevronLeft size={16}/>\r\n          Voltar\r\n        </Link>\r\n      </Header>\r\n      {repository && (\r\n        <RepositoryInfo>\r\n          <Header>\r\n            <img src={repository?.owner.avatar_url} alt={repository.owner.login} />\r\n            <div>\r\n              <strong>{repository.full_name}</strong>\r\n              <p>{repository.description}</p>\r\n            </div>\r\n          </Header>\r\n          <ul>\r\n            <li>\r\n              <strong>{repository.stargazers_count}</strong>\r\n              <span>Stars</span>\r\n            </li>\r\n            <li>\r\n              <strong>{repository.forks_count}</strong>\r\n              <span>Forks</span>\r\n            </li>\r\n            <li>\r\n              <strong>{repository.open_issues_count}</strong>\r\n              <span>Issues abertas</span>\r\n            </li>\r\n          </ul>\r\n        </RepositoryInfo>\r\n      )}\r\n\r\n      <Issues>\r\n        {issues.map(issue => (\r\n          <a key={issue.id} href={issue.html_url} target=\"blanck\">\r\n            <img src={issue.user.avatar_url} alt={issue.user.login} />\r\n            <div>\r\n                <strong>{issue.title}</strong>\r\n                <p>{issue.user.login}</p>\r\n            </div>\r\n            <FiChevronRight size={50} />\r\n          </a>\r\n        ))}\r\n      </Issues>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Repository;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Dashboard from '../Pages/Dashboard';\r\nimport Repository from '../Pages/Repository';\r\n\r\nconst Routes: React.FC = () => (\r\n  <Switch>\r\n    <Route path=\"/\" exact component={Dashboard} />\r\n    <Route path=\"/repository/:repository+\" component={Repository} />\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport GlobalStyle from './styles/global';\r\nimport Routes from './routes';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <Routes />\r\n      </BrowserRouter>\r\n      <GlobalStyle />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}